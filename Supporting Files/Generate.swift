#!/usr/bin/env xcrun -sdk macosx swift

//
//  Generate.swift
//  Money
//
//  Created by Daniel Thorpe on 01/11/2015.
//
//

import Foundation

typealias Writer = (String) -> Void
typealias Generator = (Writer) -> Void

func createMoneyTypeForCurrency(code: String) -> String {
    return "_Money<Currency.\(code)>"
}

func createExtensionFor(typename: String, writer: Writer, content: Generator) {
    writer("extension \(typename) {")
    content(writer)
    writer("}")
}

func createFrontMatter(line: Writer) {
    line("// ")
    line("// Money, https://github.com/danthorpe/Money")
    line("// Created by Dan Thorpe, @danthorpe")
    line("// ")
    line("// The MIT License (MIT)")
    line("// ")
    line("// Copyright (c) 2015 Daniel Thorpe")
    line("// ")
    line("// Permission is hereby granted, free of charge, to any person obtaining a copy")
    line("// of this software and associated documentation files (the \"Software\"), to deal")
    line("// in the Software without restriction, including without limitation the rights")
    line("// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell")
    line("// copies of the Software, and to permit persons to whom the Software is")
    line("// furnished to do so, subject to the following conditions:")
    line("// ")
    line("// The above copyright notice and this permission notice shall be included in all")
    line("// copies or substantial portions of the Software.")
    line("// ")
    line("// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR")
    line("// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,")
    line("// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE")
    line("// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER")
    line("// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,")
    line("// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE")
    line("// SOFTWARE.")
    line("// ")
    line("// Autogenerated from build scripts, do not manually edit this file.")
    line("")
}

func createCurrencyTypes(line: Writer) {
    for code in NSLocale.ISOCurrencyCodes() {
        line("")
        line("    /// Currency \(code)")
        line("    public final class \(code): Currency.Base, ISOCurrencyType {")
        line("        public static var sharedInstance = \(code)(code: \"\(code)\")")
        line("    }")
    }
}

func createMoneyTypes(line: Writer) {
    line("")

    for code in NSLocale.ISOCurrencyCodes() {
        line("/// \(code) Money")
        let name = createMoneyTypeForCurrency(code)
        line("public typealias \(code) = \(name)")
    }
}

func generate(outputPath: String) {

    guard let outputStream = NSOutputStream(toFileAtPath: outputPath, append: false) else {
        fatalError("Unable to create output stream at path: \(outputPath)")
    }

    defer {
        outputStream.close()
    }

    let write: Writer = { str in
        guard let data = str.dataUsingEncoding(NSUTF8StringEncoding) else {
            fatalError("Unable to encode str: \(str)")
        }
        outputStream.write(UnsafePointer<UInt8>(data.bytes), maxLength: data.length)
    }

    let writeLine: Writer = { write("\($0)\n") }

    outputStream.open()
    createFrontMatter(writeLine)
    createExtensionFor("Currency", writer: writeLine, content: createCurrencyTypes)
    write("\n")
    createMoneyTypes(writeLine)
}

// MARK: - Main()

if Process.arguments.count == 1 {
    print("Invalid usage. Requires an output path.")
    exit(1)
}

let outputPath = Process.arguments[1]
generate(outputPath)