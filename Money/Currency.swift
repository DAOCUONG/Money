//
//  Currency.swift
//  Money
//
// The MIT License (MIT)
//
// Copyright (c) 2015 Daniel Thorpe
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


import Foundation

/**
 # CurrencyType
 This protocol defines the minimum interface needed for a 
 CurrencyType.
 
 The interface used to represent a single currency. Note
 that it is always used as a generic constraint on other
 types.
 
 Typically framework consumers will not need to conform to
 this protocol, unless creating their own currencies. See
 the example project "Custom Money" for an example of this.
*/
public protocol CurrencyType: DecimalNumberBehaviorType {

    /// The currency code
    static var code: String { get }

    /// The currency symbol
    static var symbol: String { get }

    /// The currency scale
    static var scale: Int { get }

    /// A number formatter for the currency
    static var formatter: NSNumberFormatter { get }
}

public extension CurrencyType {

    /**
     Default implementation of the `NSDecimalNumberBehaviors` for
     the currency. This uses `NSRoundingMode.RoundBankers` and the
     scale of the currency as given by the localized formatter.
     
     - returns: a `NSDecimalNumberBehaviors`
    */
    static var decimalNumberBehaviors: NSDecimalNumberBehaviors {
        return NSDecimalNumberHandler(
            roundingMode: .RoundBankers,
            scale: Int16(scale),
            raiseOnExactness: true,
            raiseOnOverflow: true,
            raiseOnUnderflow: true,
            raiseOnDivideByZero: true
        )
    }
}

/**
 `_CurrencyType` is a refinement of `CurrencyType` so that
 autogenerated currencies can be created.
*/
public protocol _CurrencyType: CurrencyType {

    static var sharedInstance: Self { get }

    var _locale: NSLocale { get }

    var _formatter: NSNumberFormatter { get }
}

public extension _CurrencyType {

    /// The currency code
    static var code: String {
        return formatter.currencyCode
    }

    /// The currency symbol
    static var symbol: String {
        return formatter.currencySymbol
    }

    /// The currency scale
    static var scale: Int {
        return formatter.maximumFractionDigits
    }

    /// Returns a formatter from the shared instance
    static var formatter: NSNumberFormatter {
        return sharedInstance._formatter
    }
}

/**
 # Currency
 A namespace for currency related types.
*/
public struct Currency {

    /**
     # Currency.Base
     `Currency.Base` is a class which composes a number formatter
     and a locale. It doesn't conform to `CurrencyType` but it can
     be used as a base class for currency types which only require
     a shared instance.
     */
    public class Base {

        public let _formatter: NSNumberFormatter
        public let _locale: NSLocale

        init(locale: NSLocale) {
            _formatter = {
                let fmtr = NSNumberFormatter()
                fmtr.numberStyle = .CurrencyStyle
                fmtr.locale = locale
                return fmtr
            }()
            _locale = locale
        }

        convenience init(code: String) {
            self.init(locale: NSLocale(localeIdentifier: NSLocale.localeIdentifierFromComponents([NSLocaleCurrencyCode: code])))
        }
    }

    /**
     # Currency.Local
     `Currency.Local` is a `BaseCurrency` subclass which represents
     the device's current currency, using `NSLocale.currencyLocale()`.
     */
    public final class Local: Currency.Base, _CurrencyType {
        public static var sharedInstance = Local(locale: NSLocale.currentLocale())
    }
}


// MARK: - Crypto Currencies

public protocol CryptoCurrencyType: CurrencyType { }



