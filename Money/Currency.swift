//
//  Currency.swift
//  Money
//
//  Created by Daniel Thorpe on 28/10/2015.
//
//

import Foundation

/**
 # CurrencyType
 This protocol defines the minimum interface needed for a 
 CurrencyType.
 
 The interface used to represent a single currency. Note
 that it is always used as a generic constraint on other
 types.
 
 Typically framework consumers will not need to conform to
 this protocol, unless creating their own currencies. See
 the example project "Custom Money" for an example of this.
*/
public protocol CurrencyType: DecimalNumberBehaviorType {

    /// The currency code
    static var code: String { get }

    /// The currency symbol
    static var symbol: String { get }

    /// The currency scale
    static var scale: Int { get }

    /// A number formatter for the currency
    static var formatter: NSNumberFormatter { get }
}

public extension CurrencyType {

    static var decimalNumberBehaviors: NSDecimalNumberBehaviors {
        return NSDecimalNumberHandler(
            roundingMode: .RoundBankers,
            scale: Int16(scale),
            raiseOnExactness: true,
            raiseOnOverflow: true,
            raiseOnUnderflow: true,
            raiseOnDivideByZero: true
        )
    }
}

/**
 `_CurrencyType` is a refinement of `CurrencyType` so that
 autogenerated currencies can be created.
*/
public protocol _CurrencyType: CurrencyType {

    static var sharedInstance: Self { get }

    var _locale: NSLocale { get }

    var _formatter: NSNumberFormatter { get }
}

public extension _CurrencyType {

    /// The currency code
    static var code: String {
        return formatter.currencyCode
    }

    /// The currency symbol
    static var symbol: String {
        return formatter.currencySymbol
    }

    /// The currency scale
    static var scale: Int {
        return formatter.maximumFractionDigits
    }

    /// Returns a formatter from the shared instance
    static var formatter: NSNumberFormatter {
        return sharedInstance._formatter
    }
}

/**
 # Currency
 A namespace for currency related types.
*/
public struct Currency {

    /**
     # Currency.Base
     `Currency.Base` is a class which composes a number formatter
     and a locale. It doesn't conform to `CurrencyType` but it can
     be used as a base class for currency types which only require
     a shared instance.
     */
    public class Base {

        public let _formatter: NSNumberFormatter
        public let _locale: NSLocale

        init(locale: NSLocale) {
            _formatter = {
                let fmtr = NSNumberFormatter()
                fmtr.numberStyle = .CurrencyStyle
                fmtr.locale = locale
                return fmtr
            }()
            _locale = locale
        }

        convenience init(code: String) {
            self.init(locale: NSLocale(localeIdentifier: NSLocale.localeIdentifierFromComponents([NSLocaleCurrencyCode: code])))
        }
    }

    /**
     # Currency.Local
     `Currency.Local` is a `BaseCurrency` subclass which represents
     the device's current currency, using `NSLocale.currencyLocale()`.
     */
    public final class Local: Currency.Base, _CurrencyType {
        public static var sharedInstance = Local(locale: NSLocale.currentLocale())
    }
}



